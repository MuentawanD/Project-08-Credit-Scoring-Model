#!/usr/bin/env python
# coding: utf-8

# # 1. Project Credit Scoring Model

# ## 1.1 ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå

# **üíõüíö ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå ‡∏Ñ‡∏∑‡∏≠ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡πÇ‡∏î‡∏¢‡∏°‡∏µ loan_status ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (target variable) ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ‡∏à‡∏∞‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà**
# **‡πÇ‡∏î‡∏¢‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô ‡∏°‡∏µ 2 ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏Å ‡∏Ñ‡∏∑‡∏≠**
# 1. ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Å‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö **‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ**
# 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£: ‡∏≠‡∏¢‡∏≤‡∏Å‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Å‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö **‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ**  ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î

# # 2. Importing Libraries

# In[287]:


get_ipython().system('pip  install missingno')


# In[288]:


get_ipython().system('pip install -U imbalanced-learn')


# In[289]:


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import missingno as mso
import seaborn as sns
import os
import warnings 
warnings.filterwarnings("ignore")


# In[290]:


import scipy

from scipy import stats
from scipy.stats import pearsonr
from scipy.stats import ttest_ind


# In[291]:


from sklearn import metrics
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split, GridSearchCV, KFold


# In[292]:


from imblearn.over_sampling import SMOTE


# In[293]:


from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier


# # 3. Reading Dataset

# In[294]:


df = pd.read_csv(r'C:\Users\muent\Desktop\my project for data analyst\Project-13_Loan_Prediction_Machine_Learning\Credit_Scoring_Dataset\credit_risk_dataset.csv')


# In[295]:


df


# **üíõ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ üíõ**
# 
# 1. person_age :  ‡∏≠‡∏≤‡∏¢‡∏∏                    
# 2. person_income : ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ             
# 3. person_home_ownership : ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡πâ‡∏≤‡∏ô (Own: ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡πâ‡∏≤‡∏ô, Mortgage: ‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡πâ‡∏≤‡∏ô, Rent: ‡πÄ‡∏ä‡πà‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà, Other: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πà‡∏≤‡∏¢‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô)        
# 4. person_emp_length : ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•              
# 5. loan_intent :  ‡πÄ‡∏à‡∏ï‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°                
# 6. loan_grade : ‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ                    
# 7. loan_amount : ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°                     
# 8. loan_int_rate : ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢                                  
# 9. loan_percent_income : ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ , loan_percent_income = 30 ‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏°‡∏µ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 30% ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ        
# 10. historical_default : ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï      
# 11. credit_history_length : ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï     
# 12. loan_status : ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ  ,0 (non-default): ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á ‡πÑ‡∏°‡πà‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ, 1 (default): ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á ‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ

# In[296]:


df.dtypes


# In[297]:


df.info()


# # 4. Data Exploration 

# ## 4.1 Categorical Variable 

# In[298]:


df


# ### ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (Categorical Variable)

# ### 4.1.1 person_home_ownership : ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡πâ‡∏≤‡∏ô

# **person_home_ownership (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡πâ‡∏≤‡∏ô)**
# **‡∏Ñ‡∏∑‡∏≠ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• ‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏°‡∏±‡∏Å‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏ä‡πà‡∏ô :
# 
# * Own: ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡πâ‡∏≤‡∏ô
# * Mortgage: ‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡πâ‡∏≤‡∏ô
# * Rent: ‡πÄ‡∏ä‡πà‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
# * Other: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πà‡∏≤‡∏¢‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô

# In[299]:


df.person_home_ownership.value_counts(dropna= False)


# In[300]:


countRENT = len(df[df.person_home_ownership == "RENT"])
countMORTGAGE = len(df[df.person_home_ownership == "MORTGAGE"])
countOWN = len(df[df.person_home_ownership == "OWN"])
countOTHER = len(df[df.person_home_ownership == "OTHER"])

print("Percantage of RENT : {:.2f}%".format( countRENT*100/len(df.person_home_ownership)))
print("Percantage of MORTGAGE : {:.2f}%".format( countMORTGAGE*100/len(df.person_home_ownership)))
print("Percantage of OWN : {:.2f}%".format( countOWN*100/len(df.person_home_ownership)))
print("Percantage of OTHER : {:.2f}%".format( countOTHER*100/len(df.person_home_ownership)))


# In[301]:


sns.countplot(data=df, x="person_home_ownership", palette="magma", 
              order=df["person_home_ownership"].value_counts().index)
plt.show()


# ### 4.1.2 loan_intent : ‡πÄ‡∏à‡∏ï‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°

# **loan_intent (‡πÄ‡∏à‡∏ï‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°)**
# **‡∏Ñ‡∏∑‡∏≠ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ ‡∏ã‡∏∂‡πà‡∏á‡∏°‡∏±‡∏Å‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠ ‡πÇ‡∏î‡∏¢‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ï‡πà‡∏≤‡∏á‡πÜ :**
# 
# * Education: ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
# * Medical: ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•
# * Venture: ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
# * Personal: ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
# * Debt Consolidation: ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏ß‡∏°‡∏´‡∏ô‡∏µ‡πâ
# * Home Improvement: ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢

# In[302]:


df.loan_intent.value_counts(dropna= False) #dropna= False ‡∏Ñ‡∏∑‡∏≠ ‡∏ô‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ null ‡∏î‡πâ‡∏ß‡∏¢


# In[303]:


countEDUCATION = len(df[df.loan_intent == "EDUCATION"])
countMEDICAL = len(df[df.loan_intent == "MEDICAL"])
countVENTURE = len(df[df.loan_intent == "VENTURE"])
countPERSONAL = len(df[df.loan_intent == "PERSONAL"])
countDEBTCONSOLIDATION = len(df[df.loan_intent == "DEBTCONSOLIDATION"])
countHOMEIMPROVEMENT = len(df[df.loan_intent == "HOMEIMPROVEMENT"])

print("Percantage of EDUCATION : {:.2f}%".format(countEDUCATION*100/len(df.loan_intent)))
print("Percantage of MEDICAL : {:.2f}%".format(countMEDICAL*100/len(df.loan_intent)))
print("Percantage of VENTURE : {:.2f}%".format(countVENTURE*100/len(df.loan_intent)))
print("Percantage of PERSONAL : {:.2f}%".format(countPERSONAL*100/len(df.loan_intent)))
print("Percantage of DEBTCONSOLIDATION : {:.2f}%".format(countDEBTCONSOLIDATION*100/len(df.loan_intent)))
print("Percantage of HOMEIMPROVEMENT : {:.2f}%".format(countHOMEIMPROVEMENT*100/len(df.loan_intent)))


# In[304]:


sns.countplot(data=df, y="loan_intent", palette="cividis", 
              order=df["loan_intent"].value_counts().index)
plt.show()


# ### 4.1.3 loan_grade : ‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ 

# **loan_grade ( ‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ) ‡∏Ñ‡∏∑‡∏≠ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠ ‡∏ã‡∏∂‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠ ‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏°‡∏±‡∏Å‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:**
# 
# * A: ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î, ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î
# * B: ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ, ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥
# * C: ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á, ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
# * D: ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á, ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
# * E: ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≥, ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á
# * F: ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≥‡∏°‡∏≤‡∏Å, ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å
# * G: ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î, ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î

# In[305]:


df.loan_grade.value_counts(dropna= False)


# In[306]:


count_grade_A = len(df[df.loan_grade == "A"])
count_grade_B = len(df[df.loan_grade == "B"])
count_grade_C = len(df[df.loan_grade == "C"])
count_grade_D = len(df[df.loan_grade == "D"])
count_grade_E = len(df[df.loan_grade == "E"])
count_grade_F = len(df[df.loan_grade == "F"])
count_grade_G = len(df[df.loan_grade == "G"])
                      
print("Percantage of loan grade A : {:.2f}%".format(count_grade_A*100/len(df.loan_grade)))
print("Percantage of loan grade B : {:.2f}%".format(count_grade_B*100/len(df.loan_grade)))
print("Percantage of loan grade C : {:.2f}%".format(count_grade_C*100/len(df.loan_grade)))
print("Percantage of loan grade D : {:.2f}%".format(count_grade_D*100/len(df.loan_grade)))
print("Percantage of loan grade E : {:.2f}%".format(count_grade_E*100/len(df.loan_grade)))
print("Percantage of loan grade F : {:.2f}%".format(count_grade_F*100/len(df.loan_grade)))
print("Percantage of loan grade G : {:.2f}%".format(count_grade_G*100/len(df.loan_grade)))


# In[307]:


sns.countplot(data=df, x="loan_grade", palette="autumn", 
              order=df["loan_grade"].value_counts().index)
plt.show()


# ### 4.1.4 historical_default : ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï

# **historical_default (‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï)  ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ ‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏°‡∏±‡∏Å‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô:**
# 
# * Yes (1): ‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ**‡πÄ‡∏Ñ‡∏¢**‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï
# * No (0): ‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ**‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢**‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï

# In[308]:


df.historical_default.value_counts(dropna = False)


# In[309]:


count_historical_default_No = len(df[df.historical_default == "N"])
count_historical_default_Yes = len(df[df.historical_default == "Y"])

print("Percantage of historical default is No : {:.2f}%".format(count_historical_default_No*100/len(df.historical_default)))
print("Percantage of historical default is Yes : {:.2f}%".format(count_historical_default_Yes*100/len(df.historical_default)))


# In[310]:


sns.countplot(data = df , x = "historical_default", palette= "spring")
plt.show()


# ## 4.2 Numerical Variable

# In[311]:


df.select_dtypes(exclude='object').nunique()


# ### 4.2.1 ‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô

# In[312]:


df.select_dtypes(exclude='object').describe().T


# ### 4.2.2 Correlation (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£)

# In[313]:


df.corr()


# In[314]:


plt.figure(figsize=(8,6))
sns.heatmap(df.corr(), annot= True, cmap='YlGnBu');


# In[315]:


sns.pairplot(df.select_dtypes(exclude='object'), hue = 'loan_status');


# ‚úÖ ‡∏Å‡∏£‡∏≤‡∏ü‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö Non-linear

# ### 4.2.3 ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß : ‡∏à‡∏∞‡∏û‡∏•‡πá‡∏≠‡∏ï‡∏Å‡∏£‡∏≤‡∏ü Histogram ‡πÅ‡∏•‡∏∞ Box plot ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞ ‡∏î‡∏π outlier

# #### 4.2.3.1 Histogram Distribution 

# In[316]:


sns.set(style="darkgrid")
fig, axs = plt.subplots(2, 4, figsize=(15, 6), sharex= False)

sns.histplot(data=df, x="person_age", kde=True, ax=axs[0, 0], color='skyblue')
sns.histplot(data=df, x="person_income", kde=True, ax=axs[0, 1], color='orange')
sns.histplot(data=df, x="person_emp_length", kde=True, ax=axs[0, 2], color='pink')
sns.histplot(data=df, x="loan_amount", kde=True, ax=axs[0, 3], color='green')
sns.histplot(data=df, x="loan_int_rate", kde=True, ax=axs[1, 0], color='red')
sns.histplot(data=df, x="loan_percent_income", kde=True, ax=axs[1, 1], color='yellow')
sns.histplot(data=df, x="credit_history_length", kde=True, ax=axs[1, 2], color='purple')

fig.suptitle("Histogram Distribution", fontsize=16, fontweight='bold')
fig.subplots_adjust(hspace= 0.3 ,wspace=0.3)


# #### 4.2.3.2  Boxplot

# In[317]:


sns.set(style="darkgrid")
fig, axs1 = plt.subplots(2, 4, figsize=(15, 8), sharex= False)

sns.boxplot(data=df, y="person_age", ax=axs1[0, 0], color='skyblue')
sns.boxplot(data=df, y="person_income", ax=axs1[0, 1], color='orange')
sns.boxplot(data=df, y="person_emp_length", ax=axs1[0, 2], color='pink')
sns.boxplot(data=df, y="loan_amount", ax=axs1[0, 3], color='green')
sns.boxplot(data=df, y="loan_int_rate", ax=axs1[1, 0], color='red')
sns.boxplot(data=df, y="loan_percent_income", ax=axs1[1, 1], color='yellow')
sns.boxplot(data=df, y="credit_history_length", ax=axs1[1, 2], color='purple')

fig.suptitle("Boxplot", fontsize=16, fontweight='bold')
fig.subplots_adjust(hspace= 0.5, wspace= 0.5)


# ## 4.3 Bivariate analysis: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£

# In[318]:


plt.figure(figsize=(8,6))
sns.heatmap(df.corr(), annot= True, cmap='YlGnBu');


# ### 4.3.1 Person age(‡∏≠‡∏≤‡∏¢‡∏∏) & Credit history length(‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï)

# In[319]:


plt.figure(figsize=(6, 5))
sns.scatterplot(data=df, x="person_age", y="credit_history_length", hue = "loan_status" )
plt.xlabel("Person Age")
plt.ylabel("Credit History Length")
plt.title("Person Age & Credit History Length")
plt.show()


#  **‡∏Å‡∏£‡∏≤‡∏ü‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•(person_age) ‡πÅ‡∏•‡∏∞ ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï(credit_history_length) 
#  ‡πÇ‡∏î‡∏¢‡πÅ‡∏ö‡πà‡∏á‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ (loan_status)**

# * ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏∏‡πà‡∏° ‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
# * ‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Å‡πá‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô ‡∏ã‡∏∂‡πà‡∏á‡∏Å‡πá‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏Å‡∏ï‡∏¥‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
# * ‡∏¢‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏ß‡πà‡∏≤‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£

# ### 4.3.2 Loan amount (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ) & Loan percent income (‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ)

# In[320]:


plt.figure(figsize=(6, 5))
sns.scatterplot(data=df, x="loan_percent_income", y="loan_amount",  hue = "loan_status")
plt.xlabel("Loan amount")
plt.ylabel("Loan percent income")
plt.title("Loan amount & Loan percent income")
plt.show()


# **‡∏Å‡∏£‡∏≤‡∏ü‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ (loan_amount) ‡πÅ‡∏•‡∏∞ ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ (loan_amount ) ‡πÇ‡∏î‡∏¢‡πÅ‡∏ö‡πà‡∏á‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ (loan_status)**

# * ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏∏‡πà‡∏° 
# * ‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô(non-linear)
# *  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£

# ### 4.3.3 Loan status (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ)  & Loan percent income (‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ)

# In[321]:


sns.boxplot(x="loan_status", y="loan_percent_income", data=df, palette="spring")
plt.show()


# **‡∏Å‡∏£‡∏≤‡∏ü‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ(Loan percent income) ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ (loan_status)**

# * ‡∏°‡∏µ outliers (‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥) ‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ (1) ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î (0) 
# * ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏ö‡πâ‡∏Ç‡∏ß‡∏≤ 
# * Median ‡∏Ç‡∏≠‡∏á loan_percent_income ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ (1) ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ ‡πÑ‡∏°‡πà‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ (0) 
# * ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ(loan_percent_income)‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ(loan_status = 1)

# ### 4.3.4 Loan status (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ)   & Loan int rate (‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ )

# In[322]:


sns.boxplot(x="loan_status", y="loan_int_rate", data=df, palette="PiYG")
plt.show()


# **‡∏Å‡∏£‡∏≤‡∏ü‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠(loan_int_rate) ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ(loan_status)**

# * ‡∏°‡∏µ outliers  ‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ (1) ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î (0) 
# * ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏ö‡πâ‡∏Ç‡∏ß‡∏≤ 
# * Median ‡∏Ç‡∏≠‡∏á loan_int_rate ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ (1) ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÑ‡∏°‡πà‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î (0) ‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤  ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ (1) ‡∏à‡∏∞‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤

# # 4.4 Null Values 

# In[323]:


df.isnull().sum()


# In[324]:


sns.heatmap(df.isnull());


# # 5. Data Preprocessing 

# ## 5.1 Data Imputation ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Ñ‡πà‡∏≤

#     üíõ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Ñ‡πà‡∏≤ (Imputation) ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£ 
#     üíõ ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏≤‡∏¢‡πÑ‡∏õ(Missing Values)

#    ### 5.1.1 Categorical Variables : ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ä‡∏ô‡∏¥‡∏î categorical variables ‡∏à‡∏∞‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢ ‡∏Ñ‡πà‡∏≤ **"mode"**

# In[325]:


df.select_dtypes(include=['object']).isnull().sum()


# ‚ùå Categorical variables ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ Missing Values

# ### 5.1.2 Numerical Variables : ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ä‡∏ô‡∏¥‡∏î Numerical Variables ‡∏à‡∏∞‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢ ‡∏Ñ‡πà‡∏≤ mean ‡πÅ‡∏•‡∏∞ mode

# In[326]:


df.select_dtypes(include=['int64', 'float64']).isnull().sum()


# In[327]:


df["person_emp_length"].fillna(df["person_emp_length"].mode()[0], inplace = True)
df["loan_int_rate"].fillna(df["loan_int_rate"].mean(), inplace = True)


# In[328]:


df.isnull().sum()


# ## 5.2 One-hot Encoding  ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏´‡∏±‡∏™ encoding ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• categorical variables

# In[329]:


df = pd.get_dummies(df)


# In[330]:


df.head()


# In[331]:


# Drop columns 
df = df.drop( 'historical_default_N', axis = 1)

# Rename columns name
new = {'historical_default_Y': 'historical_default'}
       
df.rename(columns=new, inplace=True)


# In[332]:


df


# ## 5.3 Remove Outliers : ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤ Outlier

#     üíõ ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ Interquartile Range (IQR) : ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì IQR (Q3-Q1) ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï (Q1-1.5IQR) ‡πÅ‡∏•‡∏∞ (Q3+1.5IQR)
#     üíõ ‡πÉ‡∏ä‡πâ Clip: ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ ‡πÅ‡∏ï‡πà‡∏•‡∏î‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ç‡∏≠‡∏á Outliers

# In[333]:


sns.set(style="darkgrid")
fig, axs1 = plt.subplots(2, 4, figsize=(15, 8), sharex= False)

sns.boxplot(data=df, y="person_age", ax=axs1[0, 0], color='skyblue')
sns.boxplot(data=df, y="person_income", ax=axs1[0, 1], color='orange')
sns.boxplot(data=df, y="person_emp_length", ax=axs1[0, 2], color='pink')
sns.boxplot(data=df, y="loan_amount", ax=axs1[0, 3], color='green')
sns.boxplot(data=df, y="loan_int_rate", ax=axs1[1, 0], color='red')
sns.boxplot(data=df, y="loan_percent_income", ax=axs1[1, 1], color='yellow')
sns.boxplot(data=df, y="credit_history_length", ax=axs1[1, 2], color='purple')

fig.suptitle("Before handling outliers", fontsize=16, fontweight='bold')
fig.subplots_adjust(hspace= 0.5, wspace= 0.5)


# In[334]:


# ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ outliers
columns= ['person_age', 'person_income', 'person_emp_length', 
                     'loan_amount', 'loan_int_rate', 'loan_percent_income', 'credit_history_length']

# ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ outliers ‡πÉ‡∏ô columns ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ IQR
for col in columns:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    df[col] = np.clip(df[col], lower_bound, upper_bound) 
    
    #np.clip() ‡∏à‡∏≤‡∏Å NumPy ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î 
    #‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á np.clip():

       # ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ lower_bound ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ lower_bound
       # ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ upper_bound ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ upper_bound
       # ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á lower_bound ‡πÅ‡∏•‡∏∞ upper_bound ‡∏à‡∏∞‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°

# ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ outliers
columns = ['person_age', 'person_income', 'person_emp_length', 
           'loan_amount', 'loan_int_rate', 'loan_percent_income', 'credit_history_length']

# ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ outliers ‡πÉ‡∏ô columns ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ IQR
for col in columns:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    
    # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    df = df[(df[col] >= lower_bound) & (df[col] <= upper_bound)]
# In[335]:


sns.set(style="darkgrid")
fig, axs1 = plt.subplots(2, 4, figsize=(15, 8), sharex= False)

sns.boxplot(data=df, y="person_age", ax=axs1[0, 0], color='skyblue')
sns.boxplot(data=df, y="person_income", ax=axs1[0, 1], color='orange')
sns.boxplot(data=df, y="person_emp_length", ax=axs1[0, 2], color='pink')
sns.boxplot(data=df, y="loan_amount", ax=axs1[0, 3], color='green')
sns.boxplot(data=df, y="loan_int_rate", ax=axs1[1, 0], color='red')
sns.boxplot(data=df, y="loan_percent_income", ax=axs1[1, 1], color='yellow')
sns.boxplot(data=df, y="credit_history_length", ax=axs1[1, 2], color='purple')

fig.suptitle("After handling outliers", fontsize=16, fontweight='bold')
fig.subplots_adjust(hspace= 0.5, wspace= 0.5)


# In[336]:


df


# ## 5.4 Skewed Distribution Treatment

# ##### üíõ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏ö‡πâ‡∏Ç‡∏ß‡∏≤‡πÉ‡∏´‡πâ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡∏ö normalized  distribution
# - ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡πâ (Skewed Distribution) ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ Square Root Transformation
# - ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏ô‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ô‡∏ö‡πà‡∏≠‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡∏Å‡πÅ‡∏à‡∏á‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥ (Normal Distribution) ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô 
# - ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡πâ‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤ (Right-Skewed)
# 
# ***‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°***
# - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡πâ‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢ (Left-Skewed) ‡∏ô‡∏±‡πâ‡∏ô ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏ô‡∏¥‡∏¢‡∏°‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡∏Ñ‡∏∑‡∏≠ Cube Root Transformation
# - Cube Root Transformation ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏£‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡πâ‡∏ô
# - ‡∏ô‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Skewed Distribution ‡πÄ‡∏ä‡πà‡∏ô Log Transformation, Box-Cox Transformation ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô 

# In[337]:


sns.set(style="darkgrid")
fig, axs = plt.subplots(2, 4, figsize=(15, 8), sharex= False)

sns.histplot(data=df, x="person_age", kde=True, ax=axs[0, 0], color='skyblue')
sns.histplot(data=df, x="person_income", kde=True, ax=axs[0, 1], color='orange')
sns.histplot(data=df, x="person_emp_length", kde=True, ax=axs[0, 2], color='pink')
sns.histplot(data=df, x="loan_amount", kde=True, ax=axs[0, 3], color='green')
sns.histplot(data=df, x="loan_int_rate", kde=True, ax=axs[1, 0], color='red')
sns.histplot(data=df, x="loan_percent_income", kde=True, ax=axs[1, 1], color='yellow')
sns.histplot(data=df, x="credit_history_length", kde=True, ax=axs[1, 2], color='purple')

fig.suptitle("Before skewed distribution treatment", fontsize=16, fontweight='bold')
fig.subplots_adjust(hspace= 0.3 ,wspace=0.3)


# In[338]:


# Square Root Transformation 

df.person_age = np.sqrt(df.person_age)
df.person_income = np.sqrt(df.person_income)
df.person_emp_length = np.sqrt(df.person_emp_length)
df.loan_amount = np.sqrt(df.loan_amount)
df.loan_int_rate = np.sqrt(df.loan_int_rate)
df.loan_percent_income = np.sqrt(df.loan_percent_income)
df.credit_history_length = np.sqrt(df.credit_history_length)


# In[339]:


sns.set(style="darkgrid")
fig, axs = plt.subplots(2, 4, figsize=(15, 8), sharex= False)

sns.histplot(data=df, x="person_age", kde=True, ax=axs[0, 0], color='skyblue')
sns.histplot(data=df, x="person_income", kde=True, ax=axs[0, 1], color='orange')
sns.histplot(data=df, x="person_emp_length", kde=True, ax=axs[0, 2], color='pink')
sns.histplot(data=df, x="loan_amount", kde=True, ax=axs[0, 3], color='green')
sns.histplot(data=df, x="loan_int_rate", kde=True, ax=axs[1, 0], color='red')
sns.histplot(data=df, x="loan_percent_income", kde=True, ax=axs[1, 1], color='yellow')
sns.histplot(data=df, x="credit_history_length", kde=True, ax=axs[1, 2], color='purple')

fig.suptitle("After skewed distribution treatment", fontsize=16, fontweight='bold')
fig.subplots_adjust(hspace= 0.3 ,wspace=0.3)


# ## 5.5 Features Separating 

# #### üß°üíö ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏≠‡∏¥‡∏™‡∏£‡∏∞ (X) ‡πÅ‡∏•‡∏∞ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡∏≤‡∏°(y)

# In[340]:


df


# In[341]:


X = df.drop(["loan_status"], axis=1)
y = df["loan_status"]


# In[342]:


# --- ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• train/test ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠ column ‡πÑ‡∏ß‡πâ ---
feature_names = X.columns  # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ X ‡πÄ‡∏õ‡πá‡∏ô DataFrame ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
feature_names


# In[343]:


sns.set(style="darkgrid")
sns.countplot(y=y, data=X, palette="cool")
plt.ylabel('Loan Status')
plt.xlabel('Total')
plt.show()


# In[344]:


class_counts = y.value_counts()
class_counts


# In[345]:


class_proportions = class_counts / len(y)
class_proportions


# In[346]:


print("Class Counts:\n", class_counts)
print("\nClass Proportions:\n", class_proportions)


# * **‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤ Minority Class (loan_status = 1) ‡∏°‡∏µ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ Majority Class (loan_status = 0)**
# * **‡πÇ‡∏î‡∏¢‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô Minority Class (loan_status = 1)  ‡∏°‡∏µ 21.8%**
# * **‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô Majority Class (loan_status = 0) ‡∏°‡∏µ‡∏ñ‡∏∂‡∏á 78.1%** 
# 
# **------‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£----------**
#  * **‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâSMOTE Technique ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° (Oversampling) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≥‡πÄ‡∏û‡∏≤‡∏∞ (Overfitting)**
#  * ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ 5.7 

# ## 5.7 SMOTE Technique 

#     üíö ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô loan_status ‡∏ô‡∏±‡πâ‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏Å‡∏±‡∏ô
#     üíö ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∂‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° (Oversampling) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≥‡πÄ‡∏û‡∏≤‡∏∞ (Overfitting)

# **SMOTE ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå (Synthetic Data) ‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡πâ‡∏≠‡∏¢ (Minority Class) 
# ‡πÇ‡∏î‡∏¢‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà**
# 
# **‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á SMOTE ‡∏°‡∏µ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ**
# 
# 1. ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡πâ‡∏≠‡∏¢ ‡∏à‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (nearest neighbors) ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
# 2. ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡∏ö‡∏ô‡πÄ‡∏ß‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
# 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏ö‡∏ô‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ
# 4. ‡∏ó‡∏≥‡∏ã‡πâ‡∏≥‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2 ‡πÅ‡∏•‡∏∞ 3 ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡πà‡∏ß‡∏ô‡∏ô‡πâ‡∏≠‡∏¢
# 
# 
# - SMOTE (Synthetic Minority Over-sampling Technique) ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏• (Imbalanced Data) 
# - ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡πà‡∏ß‡∏ô‡∏ô‡πâ‡∏≠‡∏¢ (Minority Class) ‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏°‡∏≤‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà (Majority Class)
# - ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ SMOTE ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡πà‡∏ß‡∏ô‡∏ô‡πâ‡∏≠‡∏¢ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡∏™‡πà‡∏á‡∏ú‡∏•‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á (Machine Learning Algorithms) ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
# - ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏Å‡πá‡∏ï‡∏≤‡∏° SMOTE ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ö‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î overfitting ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡∏•‡∏î‡∏•‡∏á‡πÑ‡∏î‡πâ ‡∏à‡∏∂‡∏á‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á
1. ‡πÉ‡∏ä‡πâ k_neighbors = 3  # k = 3,4,5,7
smote = SMOTE(k_neighbors=3, random_state=33)
X_resampled, y_resampled = smote.fit_resample(X, y)  ‚ùå‚ùå‚ùå # ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Å‡∏¥‡∏î underfitting ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Logistic regression model  ‚ùå‚ùå‚ùå

2. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô minority class ‡πÄ‡∏õ‡πá‡∏ô 70% ‡∏Ç‡∏≠‡∏á majority class  -->> % ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏î‡πâ
smote = SMOTE(sampling_strategy=0.7, random_state=33)
X_resampled, y_resampled = smote.fit_resample(X, y)

3. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ class
smote = SMOTE(sampling_strategy={'Approved': 20000, 'Rejected': 15000}, random_state=33)
X_resampled, y_resampled = smote.fit_resample(X, y)
# In[347]:


# 2. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô minority class ‡πÄ‡∏õ‡πá‡∏ô 85% ‡∏Ç‡∏≠‡∏á majority class
smote = SMOTE(sampling_strategy=0.85, random_state=33)
X, y= smote.fit_resample(X, y)

# ‚úÖ ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏•‡∏≠‡∏á ‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô minority class >85 % ‡∏Ç‡∏≠‡∏á majority class  -- >> ‡πÄ‡∏Å‡∏¥‡∏î underfitting 


# In[348]:


sns.set(style="darkgrid")
sns.countplot(y=y, data=X, palette="coolwarm")
plt.ylabel('Loan Status')
plt.xlabel('Total')
plt.show()


#     üíö ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ SMOTE Technique ‡∏à‡∏∞‡∏û‡∏ö‡∏ß‡πà‡∏≤ Loan Status ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô

# ## 5.8 Data Normalization

# ##### üíõ ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ ‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Data Normalization ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏≠‡∏¥‡∏™‡∏£‡∏∞(X)‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏õ‡∏Å‡∏ï‡∏¥ 

#     ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ Data Normalization ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á MinMaxScaler() ‡∏´‡∏£‡∏∑‡∏≠ Standardization 
#     ‡∏ô‡∏±‡πâ‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
# 
#     1. MinMaxScaler() 
#        - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏™‡∏±‡∏¢‡∏Å‡∏ß‡πâ‡∏≤‡∏á ‡πÇ‡∏î‡∏¢‡∏à‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0 ‡∏ñ‡∏∂‡∏á 1
#        - ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏ß‡∏ï‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô ‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏£‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ñ‡∏≠‡∏£‡πå‡πÄ‡∏ô‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ê‡∏≤‡∏ô
#        - ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô‡∏°‡∏≤‡∏Å 
# 
#     2. Standardization
#        - ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô 1 
#        - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥
#        - ‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏î‡∏≠‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏•‡∏Ç‡∏≠‡∏á outliers
#        - ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á ‡πÄ‡∏ä‡πà‡∏ô ‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡πÅ‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
# 
#     ‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Standardization ‡∏°‡∏±‡∏Å‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ MinMaxScaler() ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏î‡∏≠‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤ outliers ‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ 
#     ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏Å‡πá‡∏ï‡∏≤‡∏° ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡πá‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡πâ‡∏ô‡πÜ

# ##### üíõ ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ StandardScaler() 

# In[349]:


# X =  MinMaxScaler().fit_transform(X)


# In[350]:


from sklearn.preprocessing import StandardScaler
X = StandardScaler().fit_transform(X)


# In[351]:


X


# In[352]:


y


# # 6. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• (Model Building and Training)

# **‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:  ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• 2 ‡πÅ‡∏ö‡∏ö ‡∏ô‡∏±‡πà‡∏ô‡∏Ñ‡∏∑‡∏≠**
# * ‡πÇ‡∏°‡πÄ‡∏î‡∏• Linear model ‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà Logistic Regression
# * ‡πÇ‡∏°‡πÄ‡∏î‡∏• Non-linear model ‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà Decision Tree Classifier, Random Forest Classifier

# ## 6.1 Splitting Dataset

# ##### üíö 80% train ‡πÅ‡∏•‡∏∞ 20% test.

# In[353]:


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)


# ## 6.2 ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ 

# **üíöüíñ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•**
# 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• :
#     * Logistic Regression, Decision tree classifier, Random forest classifier 
#     * ‡πÇ‡∏î‡∏¢‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ random_state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
# 2. ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î parameter grid : 
#     * ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ tune ‡πÇ‡∏°‡πÄ‡∏î‡∏• 
# 3. Nested Cross-Validation : 
#     * ‡πÉ‡∏ä‡πâ Nested Cross-Validation ‡πÇ‡∏î‡∏¢‡∏°‡∏µ outer loop ‡πÅ‡∏•‡∏∞ inner loop 
#     * ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô 5 ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡πÜ ‡∏Å‡∏±‡∏ô 
# 4. ‡∏Å‡∏≤‡∏£‡∏´‡∏≤ Best Parameters ‡πÅ‡∏•‡∏∞ Best Model: 
#     * ‡πÉ‡∏ä‡πâ GridSearchCV ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô inner loop 
#     * ‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏î‡πâ‡∏ß‡∏¢ training set
# 5. ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå : 
#     * ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Nested Cross-Validation ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
# 6. ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô Overfitting ‡πÅ‡∏•‡∏∞ underfitting: 
#     * ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö accuracy ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á training set ‡πÅ‡∏•‡∏∞ validation set 
#     * ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á **Overfitting** ‡∏Ñ‡∏∑‡∏≠ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏î‡∏à‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å training set ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏à‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÄ‡∏ó‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏° 
#        ‡∏ô‡∏±‡πà‡∏ô‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤ accuracy ‡∏Ç‡∏≠‡∏á training set ‡∏à‡∏∞‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ validation set  ‡∏°‡∏≤‡∏Å‡πÜ ‡πÄ‡∏ä‡πà‡∏ô 0.90 ‡πÅ‡∏•‡∏∞ 0.70 ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
#     * ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á **Underfitting** ‡∏Ñ‡∏∑‡∏≠ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πà‡∏á ‡πÄ‡∏≠‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• test set ‡∏°‡∏≤‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ ‡∏ú‡∏•‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á‡∏ï‡∏•‡∏≠‡∏î 
#        ‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏à‡∏≤‡∏Å ‡∏Ñ‡πà‡∏≤ accuracy ‡∏Ç‡∏≠‡∏á training set ‡∏à‡∏∞‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ validation set  
#     * ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• generalize ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á (‡∏ñ‡πâ‡∏≤ generalize ‡∏Ñ‡∏∑‡∏≠ ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏î overfitting ‡πÅ‡∏•‡∏∞ underfitting) 
# 7. ‡∏Å‡∏≤‡∏£ Train Final Model :  
#     * ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å GridSearchCV (‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà generalize ‡πÅ‡∏•‡πâ‡∏ß) ‡∏°‡∏≤ train ‡∏ö‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• trainng set ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 
# 8. ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏ö‡∏ô Test Set:
#     * ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏ö‡∏ô test set 
# 9. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì metrics
#     * accuracy, precision, recall, ‡πÅ‡∏•‡∏∞ F1-score

# ### 6.2.1 Logistic Regression 

# In[354]:


# --- Logistic Regression ---
print("----- Logistic Regression -----")

# ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô(1) ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•  Logistic Regression
model_lr = LogisticRegression(random_state=0)

#‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô(2) ‡∏Å‡∏≥‡∏´‡∏ô‡∏î parameter grid ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î 
param_grid_lr = {'C': [0.05, 0.1, 0.5, 1], 'penalty': ['l1', 'l2']}

# ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô(3-4) Nested Cross-Validation 
outer_cv = KFold(n_splits=5, shuffle=True, random_state=0)
inner_cv = KFold(n_splits=5, shuffle=True, random_state=0)

nested_scores_lr = []
for train_index, test_index in outer_cv.split(X, y):
    X_train_fold, X_test_fold = X[train_index], X[test_index]
    y_train_fold, y_test_fold = y[train_index], y[test_index]

    model_cv_lr = GridSearchCV(model_lr, param_grid_lr, cv=inner_cv, scoring='accuracy')
    model_cv_lr.fit(X_train_fold, y_train_fold)

    y_pred_cv_lr = model_cv_lr.predict(X_test_fold)
    accuracy_lr = accuracy_score(y_test_fold, y_pred_cv_lr)
    nested_scores_lr.append(accuracy_lr)

# ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô(5) ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå nested cross-validation
results_lr = {
    'cv_accuracy': np.mean(nested_scores_lr),
    'best_params': model_cv_lr.best_params_,
    'best_model': model_cv_lr.best_estimator_
}

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå nested cross-validation
print(f"Best Parameters: {results_lr['best_params']}\n")
print("Nested Cross-Validation Accuracy scores:", nested_scores_lr)
print(f"Average Accuracy (Validation Set): {results_lr['cv_accuracy']:.4f}")

# ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô(6) ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏• Overfitting
model_train_lr = LogisticRegression(**results_lr['best_params'], random_state=0) #‡πÉ‡∏ä‡πâ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å nested cross-validation
model_train_lr.fit(X_train, y_train)

y_pred_train_lr = model_train_lr.predict(X_train)
train_accuracy_lr = accuracy_score(y_train, y_pred_train_lr)
print(f"Accuracy (Training Set): {train_accuracy_lr:.4f}")
print(f"Accuracy diff: {train_accuracy_lr - results_lr['cv_accuracy']:.4f}\n")

# ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô(7) Train Final Model
final_model_lr = results_lr['best_model']
final_model_lr.fit(X_train, y_train)

# ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô(8)‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏• Final Model ‡∏ö‡∏ô test set
y_pred_lr = final_model_lr.predict(X_test)

# ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô(9) ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì metrics
test_accuracy_lr = accuracy_score(y_test, y_pred_lr)
test_precision_lr = precision_score(y_test, y_pred_lr)
test_recall_lr = recall_score(y_test, y_pred_lr)
test_f1_lr = f1_score(y_test, y_pred_lr)

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå metrics
print(f"Accuracy (Test Set): {test_accuracy_lr:.4f}")
print(f"Precision (Test Set): {test_precision_lr:.4f}")
print(f"Recall (Test Set): {test_recall_lr:.4f}")
print(f"F1-score (Test Set): {test_f1_lr:.4f}\n")


# ### üíñFeature Importance for Logistic Regression
# * Logistic Regression ‡πÑ‡∏°‡πà‡∏°‡∏µ feature importance ‡πÉ‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Tree-based models
# * ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏Ñ‡πà‡∏≤ coefficients ‡πÑ‡∏î‡πâ ‡∏ã‡∏∂‡πà‡∏á‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ñ‡∏∂‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏≠‡∏á feature‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
#     * ‡∏Ñ‡πà‡∏≤ positive ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á feature ‡∏ô‡∏±‡πâ‡∏ô **‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ**
#     * ‡∏Ñ‡πà‡∏≤ negative ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á feature ‡∏ô‡∏±‡πâ‡∏ô **‡∏•‡∏î‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ**

# In[355]:


# --- Feature Importance for Logistic Regression ---

importances_lr = final_model_lr.coef_[0]
indices_lr = np.argsort(abs(importances_lr))[::-1]

print("\nFeature ranking (Logistic Regression - Coefficients):")
for f in range(X_train.shape[1]): 
    # ‡πÉ‡∏ä‡πâ feature_names ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
    print("%d. feature %s (%f)" % (f + 1, feature_names[indices_lr[f]], importances_lr[indices_lr[f]]))

# ‡∏û‡∏•‡πá‡∏≠‡∏ï‡∏Å‡∏£‡∏≤‡∏ü coefficients
plt.figure(figsize=(10, 6))
plt.title("Feature Coefficients (Logistic Regression)")
plt.bar(range(X_train.shape[1]), importances_lr[indices_lr], color="r", align="center") 
plt.xticks(range(X_train.shape[1]), feature_names[indices_lr], rotation=90) 
plt.xlim([-1, X_train.shape[1]]) 
plt.show()


# ### üíö ‡πÅ‡∏õ‡∏•‡∏ú‡∏• Feature Importances (Logistic Regression)

# ‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• Logistic Regression ‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á features ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ
# 
# **üî∫Features ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î (‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å)**
# 
# * **loan_percent_income**:  ‡∏¢‡∏¥‡πà‡∏á‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á ‡∏¢‡∏¥‡πà‡∏á‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î **‡∏°‡∏≤‡∏Å**
# * **loan_int_rate**: ‡∏¢‡∏¥‡πà‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏™‡∏π‡∏á ‡∏¢‡∏¥‡πà‡∏á‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î **‡∏°‡∏≤‡∏Å**
# * **person_income**: ‡∏¢‡∏¥‡πà‡∏á‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ**‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô** (‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏†‡∏≤‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏™‡∏π‡∏á‡∏ï‡∏≤‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ú‡πà‡∏≠‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏û‡∏á, ‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏°‡πâ‡∏Å‡∏£‡∏∞‡∏ó‡∏±‡πà‡∏á‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ: ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏¢‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
# 
# **üîªFeatures ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏•‡∏î‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î (‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏ö‡∏™‡∏π‡∏á)** 
# 
# * **loan_grade_A**: ‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ loan grade A ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î **‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î** ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≤‡∏î 
# * **loan_grade_B**:  ‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ loan grade B  ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î **‡∏ô‡πâ‡∏≠‡∏¢** ‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏±‡∏ô  (‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ A ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)
# * **person_home_ownership_MORTGAGE**: ‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≠‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î **‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤** ‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πà‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡πâ‡∏≤‡∏ô (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Correlation ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Causation ‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà person_home_ownership_MORTGAGE ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ coefficient ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏ö ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤ ‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≠‡∏ô‡∏ö‡πâ‡∏≤‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏•‡∏î‡∏•‡∏á‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≠‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ)
# 
# **üíõFeatures ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏•‡∏ô‡πâ‡∏≠‡∏¢ (‡πÉ‡∏Å‡∏•‡πâ 0)**
# 
# * **person_age**, **credit_history_length**:  ‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÅ‡∏•‡∏∞ ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï  ‡∏î‡∏π‡∏à‡∏∞‡∏°‡∏µ‡∏ú‡∏•‡∏ô‡πâ‡∏≠‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
# 
# **‚úÖ‡∏Ç‡πâ‡∏≠‡∏™‡∏£‡∏∏‡∏õ:**
# * **loan_percent_income  ‡πÄ‡∏î‡πà‡∏ô‡∏ä‡∏±‡∏î**   ‡πÄ‡∏ô‡πâ‡∏ô‡∏¢‡πâ‡∏≥‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏∞‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
# * **loan_percent_income  ‡πÅ‡∏•‡∏∞  loan_int_rate**   ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡∏≠‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏•‡∏™‡∏π‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£ **‡∏ú‡∏¥‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ**
# * **loan_grade  ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏°‡∏µ‡∏≠‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏•**    ‡πÄ‡∏Å‡∏£‡∏î A ‡πÅ‡∏•‡∏∞ B  ‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥ 
# 

# ### 6.2.2 Decision tree classifier

# In[356]:


# --- Decision Tree ---
print("----- Decision Tree -----")

#  ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô(1) ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
model_dt = DecisionTreeClassifier(random_state=0)

#  ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô(2) ‡∏Å‡∏≥‡∏´‡∏ô‡∏î parameter grid
param_grid_dt = {'max_depth': [5,7,9], 'min_samples_split': [35, 40,50], 'min_samples_leaf': [5, 7, 9]}

#  ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô(3-4) Nested Cross-Validation
outer_cv = KFold(n_splits=5, shuffle=True, random_state=0)
inner_cv = KFold(n_splits=5, shuffle=True, random_state=0)

nested_scores_dt = []
for train_index, test_index in outer_cv.split(X, y):
    X_train_fold, X_test_fold = X[train_index], X[test_index]
    y_train_fold, y_test_fold = y[train_index], y[test_index]

    model_cv_dt = GridSearchCV(model_dt, param_grid_dt, cv=inner_cv, scoring='accuracy')
    model_cv_dt.fit(X_train_fold, y_train_fold)

    y_pred_cv_dt = model_cv_dt.predict(X_test_fold)
    accuracy_dt = accuracy_score(y_test_fold, y_pred_cv_dt)
    nested_scores_dt.append(accuracy_dt)

#  ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô(5) ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå nested cross-validation
results_dt = {
    'cv_accuracy': np.mean(nested_scores_dt),
    'best_params': model_cv_dt.best_params_,
    'best_model': model_cv_dt.best_estimator_
}

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå nested cross-validation
print(f"Best Parameters: {results_dt['best_params']}\n")
print("Nested Cross-Validation Accuracy scores:", nested_scores_dt)
print(f"Average Accuracy (Validation Set): {results_dt['cv_accuracy']:.4f}")

#  ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô(6) ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏• Overfitting
model_train_dt = DecisionTreeClassifier(**results_dt['best_params'], random_state=0)
model_train_dt.fit(X_train, y_train)

y_pred_train_dt = model_train_dt.predict(X_train)
train_accuracy_dt = accuracy_score(y_train, y_pred_train_dt)
print(f"Accuracy (Training Set): {train_accuracy_dt:.4f}")
print(f"Accuracy diff: {train_accuracy_dt - results_dt['cv_accuracy']:.4f}\n")

#  ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô(7)Train Final Model
final_model_dt = results_dt['best_model']
final_model_dt.fit(X_train, y_train)

# ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô(8) ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏• Final Model ‡∏ö‡∏ô test set
y_pred_dt = final_model_dt.predict(X_test)

# ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô(9) ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì metrics
test_accuracy_dt = accuracy_score(y_test, y_pred_dt)
test_precision_dt = precision_score(y_test, y_pred_dt)
test_recall_dt = recall_score(y_test, y_pred_dt)
test_f1_dt = f1_score(y_test, y_pred_dt)

#  ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå metrics
print(f"Accuracy (Test Set): {test_accuracy_dt:.4f}")
print(f"Precision (Test Set): {test_precision_dt:.4f}")
print(f"Recall (Test Set): {test_recall_dt:.4f}")
print(f"F1-score (Test Set): {test_f1_dt:.4f}\n")


# ### üß° Feature Importance for Decision Tree 
# * ‡πÉ‡∏ä‡πâ feature_importances_ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á feature
# * ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
# 

# In[357]:


# --- Feature Importance for Decision Tree ---
importances_dt = final_model_dt.feature_importances_
indices_dt = np.argsort(importances_dt)[::-1]

print("\nFeature ranking (Decision Tree):")
for f in range(X_train.shape[1]):
    print("%d. feature %s (%f)" % (f + 1, feature_names[indices_dt[f]], importances_dt[indices_dt[f]]))

# ‡∏û‡∏•‡πá‡∏≠‡∏ï‡∏Å‡∏£‡∏≤‡∏ü Feature Importances
plt.figure(figsize=(10, 6))
plt.title("Feature Importances (Decision Tree)")
plt.bar(range(X_train.shape[1]), importances_dt[indices_dt], color="g", align="center")
plt.xticks(range(X_train.shape[1]), feature_names[indices_dt], rotation=90)
plt.xlim([-1, X_train.shape[1]])
plt.show()


# ### üß°‡πÅ‡∏õ‡∏•‡∏ú‡∏• Feature Importances (Decision Tree)

# ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Decision Tree ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á Features ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ ‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å Logistic Regression ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
# 
# **üî∫Features ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏π‡∏á)**
# 
# *  **loan_percent_income (0.241524):** ‡∏¢‡∏¥‡πà‡∏á‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á ‡∏¢‡∏¥‡πà‡∏á‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ **‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î** ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á Logistic Regression 
# *  **loan_int_rate (0.182826):**  ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏™‡∏π‡∏á ‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏±‡∏ô 
# *  **loan_grade_C (0.169487):**   ‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ loan grade C  ‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏™‡∏π‡∏á ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 3 
# 
# **üîªFeatures ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏≠‡∏á‡∏•‡∏á‡∏°‡∏≤**
# 
# *   **person_income (0.101707):**  ‡πÅ‡∏°‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ö‡∏ß‡∏Å  ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏•‡∏î‡∏•‡∏á‡∏°‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 4  ‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡∏ß‡πà‡∏≤ Decision Tree ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö Logistic Regression 
# *   **loan_grade  ‡∏≠‡∏∑‡πà‡∏ô‡πÜ**:   ‡πÄ‡∏Å‡∏£‡∏î B, A,  MORTGAGE, OWN  ‡∏Å‡πá‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢  
# *   **person_emp_length (0.019294):**   ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô  ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô  ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö  Logistic Regression 
# 
# **üíõFeatures ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏• (‡πÉ‡∏Å‡∏•‡πâ 0)**
# 
# *   **historical_default**:  ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï  ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÉ‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• Decision Tree ‡∏ô‡∏µ‡πâ  ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞ features ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤  ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ Pattern ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
# 
# **‚úÖ‡∏Ç‡πâ‡∏≠‡∏™‡∏£‡∏∏‡∏õ**
# 
# *   **Decision Tree Model** ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö  **loan_percent_income  ‡πÅ‡∏•‡∏∞  loan_int_rate   ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î  ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö  Logistic Regression**
# *   loan_grade   ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç   ‡πÅ‡∏ï‡πà  Decision Tree  ‡∏≠‡∏≤‡∏à‡πÉ‡∏´‡πâ ‡∏ô‡πâ‡πç‡∏≤‡∏´‡∏ô‡∏±‡∏Å‡∏Å‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Å‡∏£‡∏î‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô 
# *   person_income  ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏•‡∏î‡∏•‡∏á   
# *   ‡∏ö‡∏≤‡∏á features  ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô  Logistic Regression  (‡πÄ‡∏ä‡πà‡∏ô  person_emp_length)   ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô  Decision Tree 

# ### 6.2.3 Random forest classifier

# In[358]:


# --- Random Forest ---
print("----- Random Forest -----")

# ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô(1) ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
model_rf = RandomForestClassifier(random_state=0)

# ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô(2) ‡∏Å‡∏≥‡∏´‡∏ô‡∏î parameter grid
param_grid_rf = {'n_estimators': [200], 'max_depth': [10, 12], 'min_samples_split': [25, 30], 'min_samples_leaf': [4, 7]}

# ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô(3-4) Nested Cross-Validation
outer_cv = KFold(n_splits=5, shuffle=True, random_state=0)
inner_cv = KFold(n_splits=5, shuffle=True, random_state=0)

nested_scores_rf = []
for train_index, test_index in outer_cv.split(X, y):
    X_train_fold, X_test_fold = X[train_index], X[test_index]
    y_train_fold, y_test_fold = y[train_index], y[test_index]

    model_cv_rf = GridSearchCV(model_rf, param_grid_rf, cv=inner_cv, scoring='accuracy')
    model_cv_rf.fit(X_train_fold, y_train_fold)
    
    y_pred_cv_rf = model_cv_rf.predict(X_test_fold)
    accuracy_rf = accuracy_score(y_test_fold, y_pred_cv_rf)
    nested_scores_rf.append(accuracy_rf)

# ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô(5) ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå nested cross-validation
results_rf = {
    'cv_accuracy': np.mean(nested_scores_rf),
    'best_params': model_cv_rf.best_params_,
    'best_model': model_cv_rf.best_estimator_
}

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå nested cross-validation
print(f"Best Parameters: {results_rf['best_params']}\n")
print("Nested Cross-Validation Accuracy scores:", nested_scores_rf)
print(f"Average Accuracy (Validation Set): {results_rf['cv_accuracy']:.4f}")

# ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô(6) ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏• Overfitting
model_train_rf = RandomForestClassifier(**results_rf['best_params'], random_state=0)
model_train_rf.fit(X_train, y_train)

y_pred_train_rf = model_train_rf.predict(X_train)
train_accuracy_rf = accuracy_score(y_train, y_pred_train_rf)
print(f"Accuracy (Training Set): {train_accuracy_rf:.4f}")
print(f"Accuracy diff: {train_accuracy_rf - results_rf['cv_accuracy']:.4f}\n")

# ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô(7). Train Final Model
final_model_rf = results_rf['best_model']
final_model_rf.fit(X_train, y_train)

# ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô(8) ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏• Final Model ‡∏ö‡∏ô test set
y_pred_rf = final_model_rf.predict(X_test)

# ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô(9) ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì metrics
test_accuracy_rf = accuracy_score(y_test, y_pred_rf)
test_precision_rf = precision_score(y_test, y_pred_rf)
test_recall_rf = recall_score(y_test, y_pred_rf)
test_f1_rf = f1_score(y_test, y_pred_rf)

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå metrics
print(f"Accuracy (Test Set): {test_accuracy_rf:.4f}")
print(f"Precision (Test Set): {test_precision_rf:.4f}")
print(f"Recall (Test Set): {test_recall_rf:.4f}")
print(f"F1-score (Test Set): {test_f1_rf:.4f}\n")


# ### üíõ Feature Importance for Random Forest

# In[364]:


# --- Feature Importance for Random Forest ---
importances_rf = final_model_rf.feature_importances_
indices_rf = np.argsort(importances_rf)[::-1]

print("\nFeature ranking (Random Forest):")
for f in range(X_train.shape[1]):
    print("%d. feature %s (%f)" % (f + 1, feature_names[indices_rf[f]], importances_rf[indices_rf[f]]))

# ‡∏û‡∏•‡πá‡∏≠‡∏ï‡∏Å‡∏£‡∏≤‡∏ü Feature Importances
plt.figure(figsize=(10, 6))
plt.title("Feature Importances (Random Forest)")
plt.bar(range(X_train.shape[1]), importances_rf[indices_rf], color="b", align="center")
plt.xticks(range(X_train.shape[1]), feature_names[indices_rf], rotation=90)
plt.xlim([-1, X_train.shape[1]])
plt.show()


# ### üíõ‡πÅ‡∏õ‡∏•‡∏ú‡∏• Feature Importances (Random Forest)

# ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Random Forest ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á Features ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ ‡∏ã‡∏∂‡πà‡∏á‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• Decision Tree ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ
# 
# **üî∫Features ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏π‡∏á)**
# 
# * **loan_percent_income (0.199335):**  ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô Feature ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏¢‡∏¥‡πà‡∏á‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á ‡∏¢‡∏¥‡πà‡∏á‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ **‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î**
# * **loan_int_rate (0.114966):** ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏™‡∏π‡∏á ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á ‡πÄ‡∏ä‡πà‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• Desion Tree
# * **person_income (0.099381):**  Random Forest ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ Decision Tree  
# 
# **üîªFeatures ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏≠‡∏á‡∏•‡∏á‡∏°‡∏≤**
# 
# * **loan_grade**: ‡πÄ‡∏Å‡∏£‡∏î A, B, C ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö  ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤ Random Forest ‡∏≠‡∏≤‡∏à‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô Pattern ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö loan grade
# * **person_home_ownership**: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡πâ‡∏≤‡∏ô  ‡∏ó‡∏±‡πâ‡∏á MORTGAGE, OWN, RENT ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
# * **loan_amount**: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ ‡∏Å‡πá‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏´‡∏ô‡∏∂‡πà‡∏á
# 
# **üíõFeatures ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á**
# 
# * **person_emp_length**, **credit_history_length**, **person_age**:  Features ‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏•‡∏î‡∏•‡∏á  ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• Decision Tree 
# * **historical_default**:  Random Forest ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ Decision Tree  
# 
# **‚úÖ‡∏Ç‡πâ‡∏≠‡∏™‡∏£‡∏∏‡∏õ**
# 
# * **Random Forest**  ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö  **loan_percent_income, loan_int_rate, person_income, loan_grade**  ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
# * loan_grade  ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç  
# * Random Forest  ‡∏≠‡∏≤‡∏à‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö  Features  ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤  ‡πÄ‡∏ä‡πà‡∏ô  person_income  ‡πÅ‡∏•‡∏∞  loan_amount 

# ## 6.3 ‡∏Å‡∏£‡∏≤‡∏ü ROC (Receiver Operating Characteristic) ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ

# * **‡∏£‡∏±‡∏ô Nested Cross-Validation ‡πÅ‡∏•‡∏∞‡∏ù‡∏∂‡∏Å final model ‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•**
# * **‡πÄ‡∏Å‡πá‡∏ö final models ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô final_model_lr, final_model_dt, final_model_rf**
# * **‡∏û‡∏•‡πá‡∏≠‡∏ï ROC curve ‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≤‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ö‡∏ô‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô**

# In[360]:


from sklearn.metrics import accuracy_score, roc_curve, auc

# --- Plot ROC Curves ---
plt.figure(figsize=(8, 6))
plt.plot([0, 1], [0, 1], linestyle='--', lw=2, color='r', label='Chance', alpha=.8)

# Logistic Regression ROC Curve
y_pred_proba_lr = final_model_lr.predict_proba(X_test)[:, 1]
fpr_lr, tpr_lr, thresholds_lr = roc_curve(y_test, y_pred_proba_lr)
roc_auc_lr = auc(fpr_lr, tpr_lr)
plt.plot(fpr_lr, tpr_lr, lw=2, label=f'Logistic Regression (AUC = {roc_auc_lr:.2f})')

# Decision Tree ROC Curve
y_pred_proba_dt = final_model_dt.predict_proba(X_test)[:, 1]
fpr_dt, tpr_dt, thresholds_dt = roc_curve(y_test, y_pred_proba_dt)
roc_auc_dt = auc(fpr_dt, tpr_dt)
plt.plot(fpr_dt, tpr_dt, lw=2, label=f'Decision Tree (AUC = {roc_auc_dt:.2f})')

# Random Forest ROC Curve
y_pred_proba_rf = final_model_rf.predict_proba(X_test)[:, 1]
fpr_rf, tpr_rf, thresholds_rf = roc_curve(y_test, y_pred_proba_rf)
roc_auc_rf = auc(fpr_rf, tpr_rf)
plt.plot(fpr_rf, tpr_rf, lw=2, label=f'Random Forest (AUC = {roc_auc_rf:.2f})')

plt.xlim([-0.05, 1.05])
plt.ylim([-0.05, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC)')
plt.legend(loc="lower right")
plt.show()


# **‡πÅ‡∏Å‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏≤‡∏ü:**
# * ‡πÅ‡∏Å‡∏ô x (False Positive Rate - FPR): ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà ‡πÑ‡∏°‡πà‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î ‡πÅ‡∏ï‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ ‡∏ú‡∏¥‡∏î ‡∏ß‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î
# * ‡πÅ‡∏Å‡∏ô y (True Positive Rate - TPR): ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà ‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î ‡πÅ‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ ‡∏ñ‡∏π‡∏Å
# 
# **‡πÄ‡∏™‡πâ‡∏ô‡∏ö‡∏ô‡∏Å‡∏£‡∏≤‡∏ü:**
# * ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡πÅ‡∏¢‡∏á‡∏°‡∏∏‡∏° (Chance): ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏∏‡πà‡∏° ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å 50% ‡∏ú‡∏¥‡∏î 50% ‡∏°‡∏µ AUC = 0.5
# * ‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•:
#     * Logistic Regression: ‡πÄ‡∏™‡πâ‡∏ô‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
#     * Decision Tree : ‡πÄ‡∏™‡πâ‡∏ô‡∏™‡∏µ‡∏™‡πâ‡∏°
#     * Random Forest : ‡πÄ‡∏™‡πâ‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
#     
# **‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏ú‡∏•:**
# * AUC (Area Under the Curve): ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ï‡πâ‡πÄ‡∏™‡πâ‡∏ô ROC curve ‡πÄ‡∏õ‡πá‡∏ô metric ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡∏¢‡∏¥‡πà‡∏á‡∏Ñ‡πà‡∏≤ AUC ‡∏™‡∏π‡∏á ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏¢‡∏¥‡πà‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡πÅ‡∏¢‡∏∞ class
# * ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏µ: ‡πÄ‡∏™‡πâ‡∏ô ROC curve ‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡πÄ‡∏™‡πâ‡∏ô "Chance" ‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ AUC ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á 1

# **‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏≤‡∏ü:**
# * ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≤‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏î‡∏µ ‡πÇ‡∏î‡∏¢ Random Forest ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ AUC ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (0.97) ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ Decision Tree (0.96) ‡πÅ‡∏•‡∏∞ Logistic Regression (0.95)
# * Random Forest ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏™‡∏≤‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ Decision Tree ‡πÅ‡∏•‡∏∞ Logistic Regression 
# 
# * **AUC: ‡πÄ‡∏õ‡πá‡∏ô metric ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö threshold**
# * **AUC ‡∏™‡∏π‡∏á ‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏¢‡∏Å‡πÅ‡∏¢‡∏∞‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÑ‡∏î‡πâ‡∏î‡∏µ**
# * **AUC ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏≠‡∏Å‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Å‡∏π‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏π Precision ‡∏´‡∏£‡∏∑‡∏≠ Recall ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö**

# ## 6.3 ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Best Model

# **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á metrics  ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö  Credit Scoring:**
# 
# * **Accuracy:**  
#     * ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î)
# * **Precision:**  
#     * ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ß‡πà‡∏≤ **‡∏Ñ‡∏ô‡∏à‡∏∞‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î** (‡πÑ‡∏°‡πà‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Å‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î)
# * **Recall:**  
#     * ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö **‡∏Ñ‡∏ô‡∏à‡∏∞‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î**
# * **F1-score:**  
#     * ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Precision ‡πÅ‡∏•‡∏∞ Recall (‡πÄ‡∏Å‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏û‡∏•‡∏≤‡∏î‡∏Ñ‡∏ô‡πÑ‡∏°‡πà‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î)
# * **AUC:**  
#     * ‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å **‡∏Ñ‡∏ô‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î ‡∏Å‡∏±‡∏ö ‡∏Ñ‡∏ô‡πÑ‡∏°‡πà‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î** ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏° (‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Å‡∏π‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà)

# In[361]:


# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå metrics  --- Logistic Regression ---
print("----- Logistic Regression -----")
print(f"Accuracy (Test Set): {test_accuracy_lr:.4f}")
print(f"Precision (Test Set): {test_precision_lr:.4f}")
print(f"Recall (Test Set): {test_recall_lr:.4f}")
print(f"F1-score (Test Set): {test_f1_lr:.4f}\n")

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå metrics   --- Decision Tree ---
print("----- Decision Tree -----")
print(f"Accuracy (Test Set): {test_accuracy_dt:.4f}")
print(f"Precision (Test Set): {test_precision_dt:.4f}")
print(f"Recall (Test Set): {test_recall_dt:.4f}")
print(f"F1-score (Test Set): {test_f1_dt:.4f}\n")

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå metrics   --- Random Forest ---
print("----- Random Forest -----")
print(f"Accuracy (Test Set): {test_accuracy_rf:.4f}")
print(f"Precision (Test Set): {test_precision_rf:.4f}")
print(f"Recall (Test Set): {test_recall_rf:.4f}")
print(f"F1-score (Test Set): {test_f1_rf:.4f}\n")


# **‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô ‡∏°‡∏µ 2 ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏Å ‡∏Ñ‡∏∑‡∏≠**
# 
# 1. ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Å‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö **‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ**
# 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£: ‡∏≠‡∏¢‡∏≤‡∏Å‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Å‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö **‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ** ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
# 
# **‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô Metric ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ô‡πâ‡∏ô ‡∏Ñ‡∏∑‡∏≠**
# * ‡πÄ‡∏ô‡πâ‡∏ô‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: **Recall**
#     * Recall ‡∏™‡∏π‡∏á ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°
# * ‡πÄ‡∏ô‡πâ‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£: **Precision**
#     * Precision ‡∏™‡∏π‡∏á ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ

# üíñ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏à‡∏≤‡∏Å metrics  Recall ‡πÅ‡∏•‡∏∞ Precision ‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î 
# ‡∏à‡∏∞‡πÑ‡∏î‡πâ Best Model ‡∏Ñ‡∏∑‡∏≠ **Random Forest Classifier**

# # 7. ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

# ## 7.1 ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Random Forest Classifier

# In[362]:


# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏î‡πâ‡∏ß‡∏¢ pickle  
#‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤ final_model_rf

import pickle
filename ='Credit_Scoring_Model.pkl'
pickle.dump(final_model_rf, open(filename, 'wb'))


# ## 7.2  ‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ
filename = 'Credit_Scoring_Model.pkl'
Credit_Scoring_Model = pickle.load(open(filename, 'rb'))
# ## 7.3 ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Ç‡∏≠‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠

# #### ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤
# - Credit_Scoring_Model = Credit_Scoring_Model.predict(new_data)
# - ‡πÇ‡∏î‡∏¢ new_data ‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ Data processing ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
# 
# #### ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
# - print("Predictions:", Credit_Scoring_Model)

# **üíõüíõ---------------------------------------------------------------------------------------------------------------------------------------------üíõüíõ**
